---
- hosts: '{{ hosts }}'
  # user: root
  user: '{{ admin_user }}'
  vars_files:
    - vars.yml
  gather_facts: false
  sudo: yes

  handlers:
    - include: handlers.yml

  tasks:
  - name: create admin group
    group: name='{{ admin_group }}' gid=1010 system=no

  - name: create webapps group
    group: name=webapps system=yes gid=1011

  - name: create admin user
    user: home='/home/{{ admin_user }}' name='{{ admin_user }}' state=present
          group={{ admin_group }} uid=1000 shell=/bin/bash

  - name: create app user {{ project_name }}
    user: home='/home/{{ project_name }}' name='{{ project_name }}' state=present
          group=webapps uid=1001 system=yes shell=/bin/bash
          generate_ssh_key=no

  - name: write the sudoers file to allow admins to sudo
    template: src=conf/sudoers.j2 dest=/etc/sudoers.d/custom
      owner=root group=root mode=0400

  - name: setup authorized key (admin)
    authorized_key: user='{{ admin_user }}' key="{{ lookup('file', '/Users/maciej/.ssh/id_rsa.pub') }}"

  - name: setup authorized key ({{ project_name }})
    authorized_key: user='{{ project_name }}' key="{{ lookup('file', '/Users/maciej/.ssh/id_rsa.pub') }}"

  - name: write the sshd_config file
    template: src=conf/sshd_config.j2 dest=/etc/ssh/sshd_config
      owner=root group=root mode=0644
    notify:
      - reload sshd

  # see https://help.ubuntu.com/community/StricterDefaults
  - name: mount /dev/shm as read-only
    template: src=conf/fstab.j2 dest=/etc/fstab
    notify:
      - reboot

  - name: upgrade all packages to the latest versions
    apt: upgrade=dist update_cache=yes

  - name: install required system packages
    apt: pkg='{{ item }}' state=latest update_cache=yes cache_valid_time=3600
    with_items: system_packages

  - name: add nginx repo
    apt_repository: repo='ppa:nginx/stable'

  - name: install nginx
    apt: pkg=nginx state=latest update_cache=yes cache_valid_time=3600

  - name: create group nginx
    group: name=nginx system=no

  - name: create user nginx
    user: name=nginx group=nginx

  - name: write nginx config
    template: src=conf/nginx.conf.j2 dest=/etc/nginx/nginx.conf
                owner=root group=root mode=0644
    notify: restart nginx

  - name: remove nginx default site
    file: path=/etc/nginx/sites-enabled/default state=absent
    notify: restart nginx

  - name: download python 2.7.11
    get_url: url=https://www.python.org/ftp/python/2.7.11/Python-2.7.11.tgz dest='/home/{{ admin_user }}/Python-2.7.11.tgz'

  - name: unpack python source
    unarchive: src='/home/{{ admin_user }}/Python-2.7.11.tgz' dest='/home/{{ admin_user }}/' copy=no creates='/home/{{ admin_user }}/Python-2.7.11'

  - name: build and install new python
    shell: '{{ item }}'
    args:
      chdir: '/home/{{ admin_user }}/Python-2.7.11'
      creates: /usr/local/bin/python2.7
    with_items:
      - ./configure --with-ensurepip=install
      - make altinstall
    sudo: yes

  - name: make new-python's pip the default
    file: path=/usr/local/bin/pip src=/usr/local/bin/pip2.7 state=link force=yes
    sudo: yes

  - name: update setuptools
    command: pip install setuptools --no-use-wheel --upgrade

  - name: install basic python packages
    pip: name='{{ item }}' state=latest
    with_items:
      - '{{ basic_python_packages }}'
    sudo: yes

  # we don't actually need to do this here - only in the project's virtualenv
  # - name: install scientific-stack python packages
  #   pip: name={{ item }} state=latest virtualenv={{ virtualenv_path }}
  #   with_items:
  #     - "{{ sci_python_packages }}"

  - name: add github.com key to global known_hosts
    shell: ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts
           creates=/etc/ssh/ssh_known_hosts

  - name: clone letsencrypt repo
    git: repo=https://github.com/letsencrypt/letsencrypt
         dest=/opt/letsencrypt

- hosts: '{{ hosts }}'
  user: '{{ project_name }}'
  vars_files:
    - vars.yml
  gather_facts: false

  handlers:
    - include: handlers.yml

  tasks:
  - name: set up project environment (.bashrc)
    template: src=conf/bashrc.j2 dest='{{ user_home }}/.bashrc'

  - name: set up project environment (.bash_profile)
    template: src=conf/bash_profile.j2 dest='{{ user_home }}/.bash_profile'

  - name: create the project directory
    file: path='{{ project_root }}' state=directory owner='{{ project_name }}'

  - name: copy ssh private key to enable pulling from Github
    copy: src='{{ local_github_prv_key_path }}' dest='{{ user_home }}/.ssh/id_rsa' mode='0600'

  - name: copy ssh public key to enable pulling from Github
    copy: src='{{ local_github_pub_key_path }}' dest='{{ user_home }}/.ssh/id_rsa.pub'
